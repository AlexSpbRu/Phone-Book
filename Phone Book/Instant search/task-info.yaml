type: edu
custom_name: stage4
files:
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.v6.stage.BaseStageTest;\nimport org.hyperskill.hstest.v6.testcase.CheckResult;\n\
    import org.hyperskill.hstest.v6.testcase.TestCase;\nimport phonebook.Main;\n\n\
    import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\
    import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class\
    \ PhoneBookTest extends BaseStageTest {\n    public PhoneBookTest() {\n      \
    \  super(Main.class);\n    }\n    \n    private long timeOnTestStart;\n    \n\
    \    @Override\n    public List<TestCase> generate() {\n        timeOnTestStart\
    \ = System.currentTimeMillis();\n        return Arrays.asList(\n            new\
    \ TestCase().setTimeLimit(30 * 60 * 1000)\n        );\n    }\n    \n    \n   \
    \ private CheckResult checkPhrases(String reply, String... phrases) {\n      \
    \  reply = reply.toLowerCase();\n        for (String phrase : phrases) {\n   \
    \         if (!reply.contains(phrase.toLowerCase())) {\n                return\
    \ CheckResult.FALSE(\"Not found the part `\" + phrase + \"` in your output.\"\
    );\n            }\n        }\n        return CheckResult.TRUE;\n    }\n    \n\
    \    private List<String> findAll(String reply, String regex) {\n        Matcher\
    \ matcher = Pattern.compile(regex).matcher(reply);\n        List<String> groups\
    \ = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    \n    \n\
    \    @Override\n    public CheckResult check(String reply, Object clue) {\n  \
    \      long realTime = System.currentTimeMillis() - timeOnTestStart;\n       \
    \ reply = reply.toLowerCase();\n        CheckResult res = checkPhrases(reply,\n\
    \                \"found\",\n                \"min.\",\n                \"sec.\"\
    ,\n                \"ms.\",\n                \"sorting time\",\n             \
    \   \"searching time\",\n                \"linear search\",\n                \"\
    bubble sort\",\n                \"jump search\",\n                \"quick sort\"\
    ,\n                \"binary search\",\n                \"hash table\",\n     \
    \           \"creating time\"\n        );\n        if (!res.isCorrect()) {\n \
    \           return res;\n        }\n    \n        List<String> stat1 = findAll(reply,\
    \ \"500 / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n\
    \    \n        if (stat1.size() + stat2.size() < 4) {\n            return CheckResult.FALSE(\"\
    Your output should contain 4 times the phrase `500 / 500`\");\n        }\n   \
    \ \n        List<String> timestamps = findAll(reply, timeRegex);\n        if (timestamps.size()\
    \ != 10) {\n            return CheckResult.FALSE(\"Your output should contain\
    \ 10 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        // qsort\n    \
    \    long t5 = parseTimestamp(timestamps.get(4));\n        long t6 = parseTimestamp(timestamps.get(5));\n\
    \        long t7 = parseTimestamp(timestamps.get(6));\n        // hash table\n\
    \        long t8 = parseTimestamp(timestamps.get(7));\n        long t9 = parseTimestamp(timestamps.get(8));\n\
    \        long t10 = parseTimestamp(timestamps.get(9));\n    \n        if (Math.abs(t3\
    \ + t4 - t2) > 100) {\n            return CheckResult.FALSE(\"Your third and fourth\
    \ timer outputs in total (bubble sorting and searching) \" +\n               \
    \     \"should be equal to the second (total search time).\");\n        }\n  \
    \      if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.FALSE(\"\
    Your 6-th and 7-th timer outputs in total (qsort and searching) \" +\n       \
    \             \"should be equal to the 5-th (total search time).\");\n       \
    \ }\n        if (Math.abs(t9 + t10 - t8) > 100) {\n            return CheckResult.FALSE(\"\
    Your 9-th and 10-th timer outputs in total (creating hashtable and searching)\
    \ \" +\n                    \"should be equal to the 8-th (total search time).\"\
    );\n        }\n    \n        long estimatedTime = t1 + t2 + t5 + t8;\n       \
    \ if (realTime < 1000) {\n            return CheckResult.FALSE(\"Your program\
    \ completes too fast. Faster than a second!\");\n        }\n\n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.FALSE(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        if (t8 >= t5) {\n            return\
    \ CheckResult.FALSE(\"Your hashtable works slower, than quick sort + binary search.\"\
    );\n        }\n        return CheckResult.TRUE;\n    }\n}\n"
  learner_created: false
- name: src/phonebook/Main.java
  visible: true
  text: |
    package phonebook;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.time.LocalTime;
    import java.util.ArrayList;
    import java.util.List;

    class Contact {
        public String       name;
        public String       phoneNumber;
        Contact(String name, String phoneNumber) {
            this.name = name;
            this.phoneNumber = phoneNumber;
        }

        public boolean lessEQ( Contact cont )  {
            return name.compareToIgnoreCase(cont.name) <= 0;
        }

        public boolean eqName( String Name )  {
            return name.equalsIgnoreCase(Name);
        }

        public boolean gtName( String Name )  {
            return name.compareToIgnoreCase(Name) > 0;
        }
    }

    class PhoneBook {
       protected ArrayList<Contact>       contakts = new ArrayList<Contact>() ;
        protected Contact[]               ar_contakts;
        protected boolean loadContakts( String fileName ) {
           try {
               List<String> strList = Files.readAllLines(Paths.get(fileName));
               ar_contakts = new Contact[strList.size()];
               int i = 0;
                for( String str : strList) {
                    String[]  strArr = str.split("\\s");
                    Contact c = null;
                    if( strArr.length == 2 ) {
                        c = new Contact(strArr[1], strArr[0]);
                    } else  if( strArr.length == 3 ) {
                        c = new Contact(strArr[1] + " " + strArr[2], strArr[0]);
                    }
                    contakts.add(c);
                    ar_contakts[i] = c;
                    i++;
                }
           }
           catch( IOException e) { return  false; }
           return true;
       }

       public PhoneBook( String fileName ) {
           loadContakts( fileName );
        }

        public int size()  {
            return contakts.size();
        }

        public int find( List<String> strList ) {
            int countFind = 0;
            for( String Name : strList) {
                for (var con : contakts) {
                    if (con.name.contentEquals(Name)) {
                        countFind++;
                        break;
                    }
                }
            }
            return countFind;
        }
        //------------------------------------------------
        public long bubbleSortAR( long maxTime ) {
            var startTime = System.currentTimeMillis();
            boolean changed = false;
            int j = 0;
            do {
                var stTm = System.currentTimeMillis();
                changed = false;
                for( int i = 0; i < contakts.size() - j - 1; i++ ) {
                    if( ar_contakts[i].name.compareToIgnoreCase(ar_contakts[i+1].name) < 0 ) {
                        var v = ar_contakts[i];
                        ar_contakts[i] = ar_contakts[i+1];
                        ar_contakts[i+1] = v;
                        changed = true;
                    }
                }
                var stTime = System.currentTimeMillis();
                System.out.println(j + "  " + (stTime - stTm));
                if( stTime - startTime > maxTime) {
                    System.out.println("STOPPED, moved to linear search");
                    break;
                }
                j++;
            }
            while(changed);
            var stopTime = System.currentTimeMillis();
            return stopTime - startTime;
        }

        public long bubbleSort( long maxTime ) {
            var startTime = System.currentTimeMillis();
            boolean changed = false;
            int j = 0;
            do {
                var stTm = System.currentTimeMillis();
                changed = false;
                for( int i = 0; i < contakts.size() - j - 1; i++ ) {
                    if( contakts.get(i).name.compareToIgnoreCase(contakts.get(i+1).name)  < 0 ) {
                        var v = contakts.get(i);
                        contakts.set(i, contakts.get(i+1));
                        contakts.set(i+1, v);
                        changed = true;
                    }
                }
                var stTime = System.currentTimeMillis();
                //System.out.println(j + "  " + (stTime - stTm));
                if( stTime - startTime > maxTime) {

                    break;
                }
                j++;
            }
            while(changed);
            var stopTime = System.currentTimeMillis();
            return stopTime - startTime;
        }
        //------------------------------------------------
        public int jumpSearchSingle(String name) {
            int count = contakts.size();
            if( contakts.isEmpty() ) {
                return -1;
            }
            int blockSize = (int)Math.sqrt(count);

            if( contakts.get(0).name.equalsIgnoreCase(name) ){
                return 0;
            }
            int startBlock = 0;
            int stopBlock = 0;

            while( stopBlock < count-1 ) {

                stopBlock = Math.min(count-1,startBlock + blockSize);
                if( contakts.get(stopBlock).name.compareToIgnoreCase(name) >= 0  ) {
                     break;
                }
                startBlock = stopBlock;
            }
            if( contakts.get(stopBlock).name.compareToIgnoreCase(name) >= 0  ) {
                for( int i = stopBlock ; i > startBlock ; i-- ) {
                   if( contakts.get(i).name.compareToIgnoreCase(name) >= 0 )
                       if(contakts.get(i).name.equalsIgnoreCase(name))
                            return i;
                       else
                           return -1;
                }
            }
            return -1;
        }

        public int jumpSearch( List<String> strList ) {
            int countFind = 0;
            for( String Name : strList) {
                if( jumpSearchSingle(Name) >= 0 )
                    countFind++;
            }
            return countFind;
        }

        //------------------------------------------------

        public  void quickSort( int left, int right) {
            if (left < right) {
                int pivotIndex = partition(left, right); // the pivot is already on its place
                quickSort( left, pivotIndex - 1);  // sort the left subarray
                quickSort( pivotIndex + 1, right); // sort the right subarray
            }
        }

        private  int partition(int left, int right) {
            Contact pivot = contakts.get(right);  // choose the rightmost element as the pivot
            int partitionIndex = left; // the first element greater than the pivot

            /* move large values into the right side of the array */
            for (int i = left; i < right; i++) {
                if (contakts.get(i).lessEQ(pivot) ) { // may be used '<' as well
                    swap( i, partitionIndex);
                    partitionIndex++;
                }
            }

            swap( partitionIndex, right); // put the pivot on a suitable position

            return partitionIndex;
        }

        private  void swap(int i, int j) {
            Contact temp = contakts.get(i);
            contakts.set(i, contakts.get(j));
            contakts.set(j, temp);
        }

        //------------------------------------------------

        public  int binarySearch( String elem, int left, int right) {
            while (left <= right) {
                int mid = left + (right - left) / 2; // the index of the middle element

                if ( contakts.get(mid).eqName(elem) ) {
                    return mid; // the element is found, return its index
                } else if (contakts.get(mid).gtName(elem)) {
                    right = mid - 1; // go to the left subarray
                } else {
                    left = mid + 1;  // go the the right subarray
                }
            }
            return -1; // the element is not found
        }

        public int binarySearch( List<String> strList ) {
            int countFind = 0;
            for( String Name : strList) {
                if( binarySearch(Name, 0 , contakts.size() -1 ) >= 0 )
                    countFind++;
            }
            return countFind;
        }
    }

    class TimerPB {
        long        startTm = 0l;
        long        stopTm = 0l;

        public void start() {
            startTm = System.currentTimeMillis();
        }

        public void stop() {
            stopTm = System.currentTimeMillis();
        }

        public String toString() {
            var tm = LocalTime.ofNanoOfDay((stopTm-startTm)*1000000);
            return  tm.getMinute() + " min. " + tm.getSecond() + " sec. " +
                    (int)(tm.getNano()/1000000) + " ms.";
        }

        public static String toString( long dt ) {
            var tm = LocalTime.ofNanoOfDay(dt*1000000);
            return  tm.getMinute() + " min. " + tm.getSecond() + " sec. " +
                    (int)(tm.getNano()/1000000) + " ms.";
        }

        public long getDT() {
            return stopTm - startTm;
        }
    }

    public class Main {
        static final protected String       phoneboofFile = "d:\\Alex\\Java\\directory.txt";//"..\\..\\directory.txt";//
        static final protected String       finds = "d:\\Alex\\Java\\find.txt";//"..\\..\\find.txt";//
        public static void main(String[] args) {
            PhoneBook phonebook = new PhoneBook(phoneboofFile);
            try {
                List<String> strList = Files.readAllLines(Paths.get(finds));
                System.out.println("Start searching...");
                TimerPB tmr = new TimerPB();

                tmr.start();
                int countFind = phonebook.find(strList);
                tmr.stop();

                System.out.print("Found " + countFind + " / " + strList.size() + " entries.");
                System.out.println(" Time taken: " + tmr.toString());

                //------------------------------------------------
                System.out.println("Start searching (bubble sort + jump search)...");
                TimerPB tmr1 = new TimerPB();
                tmr1.start();
                long maxTime = tmr.getDT()*10;
                long dt = phonebook.bubbleSort(maxTime);
                if( dt > maxTime) {
                    tmr.start();
                    countFind = phonebook.find(strList);
                    tmr.stop();
                } else {
                    tmr.start();
                    countFind = phonebook.jumpSearch(strList);
                    tmr.stop();
                }
                tmr1.stop();

                System.out.print("Found " + countFind + " / " + strList.size() + " entries.");
                System.out.println(" Time taken: " + tmr1.toString());

                System.out.print("Sorting time: " + TimerPB.toString(dt));
                if( dt > maxTime) {
                    System.out.println("   STOPPED, moved to linear search...");
                } else {
                    System.out.println();
                }

                System.out.println("Searching time: " + tmr.toString());
                //------------------------------------------------
                System.out.println("Start searching (quick sort + binary search)...");
                tmr1.start();

                tmr.start();
                phonebook.quickSort(0, phonebook.size() -1 );
                tmr.stop();
                dt = tmr.getDT();

                tmr.start();
                countFind = phonebook.binarySearch(strList);
                tmr.stop();

                tmr1.stop();

                System.out.print("Found " + countFind + " / " + strList.size() + " entries.");
                System.out.println(" Time taken: " + tmr1.toString());

                System.out.println("Sorting time: " + TimerPB.toString(dt));

                System.out.println("Searching time: " + tmr.toString());
            }
            catch( IOException e) { }


        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/63/stages/475/implement
status: Solved
record: -1
